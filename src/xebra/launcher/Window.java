package xebra.launcher;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.*;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Olivier Doriath <olivierdoriath@uopeople.edu>
 */
public class Window extends javax.swing.JFrame
{

    static String gamePath;
    Process process;
    String autoFileName;
    String exePath;
    String autoMCPath;

    /**
     * Creates new form Window
     */
    public Window()
    {
        initComponents();
        load();
        if (gamePath != null)
        {
            gameText.setText(gamePath);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        exePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        exeText = new javax.swing.JTextField();
        exeBrowse = new javax.swing.JButton();
        gamePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        gameText = new javax.swing.JTextField();
        gameBrowse = new javax.swing.JButton();
        autoCheck = new javax.swing.JCheckBox();
        runCombo = new javax.swing.JComboBox<>();
        syncCheck = new javax.swing.JCheckBox();
        blankCheck = new javax.swing.JCheckBox();
        fullCheck = new javax.swing.JCheckBox();
        advPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        osRomCheck = new javax.swing.JCheckBox();
        osRomText = new javax.swing.JTextField();
        osRomBrowse = new javax.swing.JButton();
        simCheck = new javax.swing.JCheckBox();
        simText = new javax.swing.JTextField();
        simBrowse = new javax.swing.JButton();
        runCheck = new javax.swing.JCheckBox();
        runText = new javax.swing.JTextField();
        runBrowse = new javax.swing.JButton();
        iniCheck = new javax.swing.JCheckBox();
        iniText = new javax.swing.JTextField();
        iniBrowse = new javax.swing.JButton();
        mc1Check = new javax.swing.JCheckBox();
        mc1Text = new javax.swing.JTextField();
        mc1Browse = new javax.swing.JButton();
        mc2Check = new javax.swing.JCheckBox();
        mc2Text = new javax.swing.JTextField();
        mc2Browse = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Xebra Launcher");
        setResizable(false);

        exePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        exePanel.setName(""); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Xebra Executable");

        exeText.setText("XEBRA.EXE");
        exeText.setMaximumSize(new java.awt.Dimension(242, 20));
        exeText.setMinimumSize(new java.awt.Dimension(242, 20));
        exeText.setPreferredSize(new java.awt.Dimension(242, 20));

        exeBrowse.setText("Browse");
        exeBrowse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exeBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout exePanelLayout = new javax.swing.GroupLayout(exePanel);
        exePanel.setLayout(exePanelLayout);
        exePanelLayout.setHorizontalGroup(
            exePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(exePanelLayout.createSequentialGroup()
                        .addComponent(exeText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exeBrowse)))
                .addContainerGap())
        );
        exePanelLayout.setVerticalGroup(
            exePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exePanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(exePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(exeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exeBrowse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gamePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Game File");

        gameText.setToolTipText("");
        gameText.setMaximumSize(new java.awt.Dimension(242, 20));
        gameText.setMinimumSize(new java.awt.Dimension(242, 20));
        gameText.setPreferredSize(new java.awt.Dimension(242, 20));

        gameBrowse.setText("Browse");
        gameBrowse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                gameBrowseActionPerformed(evt);
            }
        });

        autoCheck.setSelected(true);
        autoCheck.setText("Auto MC1");
        autoCheck.setToolTipText("Manages Memory Card 1 automatically, including multi-disc games. Use Memory Card 2 for transfers between games.");
        autoCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                autoCheckActionPerformed(evt);
            }
        });

        runCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Run", "Run 1", "Run 2", "Run 3", "Run 4", "Run 5" }));
        runCombo.setToolTipText("Selects Run Mode. (Run 1 is recommended.)");

        syncCheck.setText("Sync");
        syncCheck.setToolTipText("Synchronize virtual time and real time.");

        blankCheck.setText("Blank");
        blankCheck.setToolTipText("Run/Misc/Blank.");

        fullCheck.setText("Fullscreen");
        fullCheck.setToolTipText("Run Xebra in full screen mode.");

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(gameText, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gameBrowse))
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(autoCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fullCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(syncCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blankCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gameBrowse)
                    .addComponent(gameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoCheck)
                    .addComponent(runCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syncCheck)
                    .addComponent(fullCheck)
                    .addComponent(blankCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        advPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Advanced");

        osRomCheck.setText("Custom OSROM");
        osRomCheck.setToolTipText("Enables the use of a custom BIOS.");
        osRomCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                osRomCheckActionPerformed(evt);
            }
        });

        osRomText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        osRomText.setEnabled(false);
        osRomText.setMaximumSize(new java.awt.Dimension(139, 20));
        osRomText.setMinimumSize(new java.awt.Dimension(139, 20));

        osRomBrowse.setText("Browse");
        osRomBrowse.setEnabled(false);
        osRomBrowse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                osRomBrowseActionPerformed(evt);
            }
        });

        simCheck.setText("Custom SIM");
        simCheck.setToolTipText("Enables the use of a custom simulation image.");
        simCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                simCheckActionPerformed(evt);
            }
        });

        simText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        simText.setEnabled(false);
        simText.setMaximumSize(new java.awt.Dimension(139, 20));
        simText.setMinimumSize(new java.awt.Dimension(139, 20));

        simBrowse.setText("Browse");
        simBrowse.setEnabled(false);
        simBrowse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                simBrowseActionPerformed(evt);
            }
        });

        runCheck.setText("Custom RUN");
        runCheck.setToolTipText("Enables the use of a custom running image.");
        runCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                runCheckActionPerformed(evt);
            }
        });

        runText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        runText.setEnabled(false);
        runText.setKeymap(null);
        runText.setMaximumSize(new java.awt.Dimension(139, 20));
        runText.setMinimumSize(new java.awt.Dimension(139, 20));

        runBrowse.setText("Browse");
        runBrowse.setEnabled(false);
        runBrowse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                runBrowseActionPerformed(evt);
            }
        });

        iniCheck.setText("Custom INI");
        iniCheck.setToolTipText("Enables the use of a custom ini file.");
        iniCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                iniCheckActionPerformed(evt);
            }
        });

        iniText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        iniText.setEnabled(false);
        iniText.setMaximumSize(new java.awt.Dimension(139, 20));
        iniText.setMinimumSize(new java.awt.Dimension(139, 20));

        iniBrowse.setText("Browse");
        iniBrowse.setEnabled(false);
        iniBrowse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                iniBrowseActionPerformed(evt);
            }
        });

        mc1Check.setText("Custom MC1");
        mc1Check.setToolTipText("Enables the use of a custom Memory Card file for slot 1. (Auto MC disables this option)");
        mc1Check.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mc1CheckActionPerformed(evt);
            }
        });

        mc1Text.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        mc1Text.setEnabled(false);
        mc1Text.setMaximumSize(new java.awt.Dimension(139, 20));
        mc1Text.setMinimumSize(new java.awt.Dimension(139, 20));

        mc1Browse.setText("Browse");
        mc1Browse.setEnabled(false);
        mc1Browse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mc1BrowseActionPerformed(evt);
            }
        });

        mc2Check.setText("Custom MC2");
        mc2Check.setToolTipText("Enables the use of a custom Memory Card file for slot 2.");
        mc2Check.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mc2CheckActionPerformed(evt);
            }
        });

        mc2Text.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        mc2Text.setEnabled(false);
        mc2Text.setMaximumSize(new java.awt.Dimension(139, 20));
        mc2Text.setMinimumSize(new java.awt.Dimension(139, 20));

        mc2Browse.setText("Browse");
        mc2Browse.setEnabled(false);
        mc2Browse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mc2BrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout advPanelLayout = new javax.swing.GroupLayout(advPanel);
        advPanel.setLayout(advPanelLayout);
        advPanelLayout.setHorizontalGroup(
            advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(advPanelLayout.createSequentialGroup()
                        .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mc2Check)
                            .addComponent(mc1Check)
                            .addComponent(iniCheck)
                            .addComponent(runCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(simCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(osRomCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(runText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(simText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iniText, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mc1Text, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mc2Text, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(osRomText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(osRomBrowse, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(simBrowse, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runBrowse, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(iniBrowse, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mc1Browse, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mc2Browse, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        advPanelLayout.setVerticalGroup(
            advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(osRomCheck)
                    .addComponent(osRomText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(osRomBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(simCheck)
                    .addComponent(simText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(simBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(runCheck)
                    .addComponent(runText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(iniCheck)
                    .addComponent(iniText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iniBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mc1Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mc1Browse)
                    .addComponent(mc1Check))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mc2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mc2Browse)
                    .addComponent(mc2Check))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveButton.setText("Save");
        saveButton.setToolTipText("Save the launcher's settings.");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.setToolTipText("Run Xebra with the specified options.");
        runButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                runButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton))
                    .addComponent(advPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(saveButton))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exeBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exeBrowseActionPerformed
    {//GEN-HEADEREND:event_exeBrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(exeText.getText());
            fc.setFileFilter(new FileNameExtensionFilter("Application", "exe"));
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                exeText.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_exeBrowseActionPerformed

    private void gameBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_gameBrowseActionPerformed
    {//GEN-HEADEREND:event_gameBrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(gameText.getText());
            fc.setFileFilter(new FileNameExtensionFilter("Game Images", "bin", "iso", "img"));
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                gameText.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_gameBrowseActionPerformed

    private void osRomBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_osRomBrowseActionPerformed
    {//GEN-HEADEREND:event_osRomBrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(osRomText.getText());
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                osRomText.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_osRomBrowseActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        File saveFile = new File(".\\SETTINGS.CFG");
        try
        {
            saveFile.createNewFile();
            PrintWriter fstream = new PrintWriter(saveFile);
            fstream.println(exeText.getText());
            fstream.println(gameText.getText());
            fstream.println(String.valueOf(autoCheck.isSelected()));
            fstream.println(String.valueOf(fullCheck.isSelected()));
            fstream.println(String.valueOf(syncCheck.isSelected()));
            fstream.println(String.valueOf(blankCheck.isSelected()));
            fstream.println(String.valueOf(runCombo.getSelectedIndex()));

            fstream.println(String.valueOf(osRomCheck.isSelected()));
            fstream.println(osRomText.getText());
            fstream.println(String.valueOf(simCheck.isSelected()));
            fstream.println(simText.getText());
            fstream.println(String.valueOf(runCheck.isSelected()));
            fstream.println(runText.getText());
            fstream.println(String.valueOf(iniCheck.isSelected()));
            fstream.println(iniText.getText());
            fstream.println(String.valueOf(mc1Check.isSelected()));
            fstream.println(mc1Text.getText());
            fstream.println(String.valueOf(mc2Check.isSelected()));
            fstream.println(mc2Text.getText());
            fstream.close();
        }
        catch (Exception e)
        {
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void simBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_simBrowseActionPerformed
    {//GEN-HEADEREND:event_simBrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(simText.getText());
            fc.setFileFilter(new FileNameExtensionFilter("Simulation File", "sim"));
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                simText.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_simBrowseActionPerformed

    private void runBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runBrowseActionPerformed
    {//GEN-HEADEREND:event_runBrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(runText.getText());
            fc.setFileFilter(new FileNameExtensionFilter("Run File", "run"));
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                runText.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_runBrowseActionPerformed

    private void iniBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_iniBrowseActionPerformed
    {//GEN-HEADEREND:event_iniBrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(iniText.getText());
            fc.setFileFilter(new FileNameExtensionFilter("Ini File", "ini"));
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                iniText.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_iniBrowseActionPerformed

    private void mc2CheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mc2CheckActionPerformed
    {//GEN-HEADEREND:event_mc2CheckActionPerformed
        if (mc2Check.isSelected())
        {
            mc2Browse.setEnabled(true);
            mc2Text.setEnabled(true);
        }
        else
        {
            mc2Browse.setEnabled(false);
            mc2Text.setEnabled(false);
        }
    }//GEN-LAST:event_mc2CheckActionPerformed

    private void mc1CheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mc1CheckActionPerformed
    {//GEN-HEADEREND:event_mc1CheckActionPerformed
        if (mc1Check.isSelected())
        {
            mc1Browse.setEnabled(true);
            mc1Text.setEnabled(true);
        }
        else
        {
            mc1Browse.setEnabled(false);
            mc1Text.setEnabled(false);
        }

    }//GEN-LAST:event_mc1CheckActionPerformed

    private void mc1BrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mc1BrowseActionPerformed
    {//GEN-HEADEREND:event_mc1BrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(mc1Text.getText());
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                mc1Text.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_mc1BrowseActionPerformed

    private void mc2BrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mc2BrowseActionPerformed
    {//GEN-HEADEREND:event_mc2BrowseActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser(mc2Text.getText());
            if (fc.showOpenDialog(fc) == JFileChooser.APPROVE_OPTION)
            {
                mc2Text.setText(fc.getSelectedFile().getCanonicalPath());
            }
        }
        catch (Exception e)
        {
        }
    }//GEN-LAST:event_mc2BrowseActionPerformed

    private void autoCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_autoCheckActionPerformed
    {//GEN-HEADEREND:event_autoCheckActionPerformed
        if (autoCheck.isSelected())
        {
            mc1Check.setEnabled(false);
            mc1Text.setEnabled(false);
            mc1Browse.setEnabled(false);

        }
        else
        {
            mc1Check.setEnabled(true);
            mc1CheckActionPerformed(evt);
        }
    }//GEN-LAST:event_autoCheckActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runButtonActionPerformed
    {//GEN-HEADEREND:event_runButtonActionPerformed
        autoFileName = gameText.getText().replaceAll(".+\\\\", "").replaceAll("(?i)\\(dis[ck].*\\d+\\)", "").replaceAll("\\..{3,4}$", "");
        exePath = exeText.getText().replaceAll("(?i)\\\\[a-z]+\\.exe$", "\\\\");
        autoMCPath = exePath + "AutoMC\\";
        if (autoCheck.isSelected())
        {
            File dir = new File(autoMCPath);
            dir.mkdir();
            File gameMC = new File(autoMCPath + autoFileName);
            try
            {
                if (gameMC.createNewFile())
                {
                    FileOutputStream dstream = new FileOutputStream(gameMC);
                    for (int i = 0; i < 131072; i++)
                    {
                        dstream.write(0);
                    }
                    dstream.close();

                }

            }
            catch (Exception e)
            {
            }

            try
            {
                File MC1 = new File(exePath + "BU00");
                MC1.renameTo(new File(exePath + "BU00.tmp"));
                Files.copy(gameMC.toPath(), new File(exePath + "BU00").toPath(), REPLACE_EXISTING);
            }
            catch (Exception e)
            {
            }
        }

        ArrayList<String> runArguments = new ArrayList<>();
        runArguments.add(exeText.getText());
        if (!gameText.getText().equals(""))
        {
            runArguments.add("-IMAGE");
            runArguments.add("\"" + gameText.getText() + "\"");
        }
        if (osRomCheck.isSelected() & !osRomText.getText().equals(""))
        {
            runArguments.add("-OSROM");
            runArguments.add("\"" + osRomText.getText() + "\"");
        }
        if (simCheck.isSelected() & !simText.getText().equals(""))
        {
            runArguments.add("-SIM");
            runArguments.add("\"" + simText.getText() + "\"");
        }
        if (runCheck.isSelected() & !runText.getText().equals(""))
        {
            runArguments.add("-RUN");
            runArguments.add("\"" + runText.getText() + "\"");
        }
        if (iniCheck.isSelected() & !iniText.getText().equals(""))
        {
            runArguments.add("-INI");
            runArguments.add("\"" + iniText.getText() + "\"");
        }
        if (mc1Check.isEnabled() & mc1Check.isSelected() & !mc1Text.getText().equals(""))
        {
            runArguments.add("-BU00");
            runArguments.add("\"" + mc1Text.getText() + "\"");
        }
        if (mc2Check.isSelected() & !mc2Text.getText().equals(""))
        {
            runArguments.add("-BU01");
            runArguments.add("\"" + mc2Text.getText() + "\"");
        }
        if (runCombo.getSelectedIndex() != 0)
        {
            runArguments.add("-RUN" + runCombo.getSelectedIndex());
        }
        if (syncCheck.isSelected())
        {
            runArguments.add("-SYNC");
        }
        if (blankCheck.isSelected())
        {
            runArguments.add("-BLANK");
        }
        if (fullCheck.isSelected())
        {
            runArguments.add("-FULL");
        }
        try
        {
            getFrames()[0].setState(JFrame.ICONIFIED);
            getFrames()[0].setEnabled(false);
            process = new ProcessBuilder(runArguments).start();
            while (process.isAlive())
            {
                Thread.sleep(100);
            }

        }
        catch (Exception e)
        {
        }
        if (autoCheck.isSelected())
        {
            try
            {
                File gameMC = new File(exePath + "BU00");
                Files.copy(gameMC.toPath(), new File(autoMCPath + autoFileName).toPath(), REPLACE_EXISTING);
                gameMC.delete();
                File MC1 = new File(exePath + "BU00.tmp");
                MC1.renameTo(new File(exePath + "BU00"));
            }
            catch (Exception e)
            {
            }

        }
        getFrames()[0].setEnabled(true);
        getFrames()[0].setState(JFrame.NORMAL);
    }//GEN-LAST:event_runButtonActionPerformed

    private void osRomCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_osRomCheckActionPerformed
    {//GEN-HEADEREND:event_osRomCheckActionPerformed
        if (osRomCheck.isSelected())
        {
            osRomBrowse.setEnabled(true);
            osRomText.setEnabled(true);
        }
        else
        {
            osRomBrowse.setEnabled(false);
            osRomText.setEnabled(false);
        }
    }//GEN-LAST:event_osRomCheckActionPerformed

    private void simCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_simCheckActionPerformed
    {//GEN-HEADEREND:event_simCheckActionPerformed
        if (simCheck.isSelected())
        {
            simBrowse.setEnabled(true);
            simText.setEnabled(true);
        }
        else
        {
            simBrowse.setEnabled(false);
            simText.setEnabled(false);
        }
    }//GEN-LAST:event_simCheckActionPerformed

    private void runCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runCheckActionPerformed
    {//GEN-HEADEREND:event_runCheckActionPerformed
        if (runCheck.isSelected())
        {
            runBrowse.setEnabled(true);
            runText.setEnabled(true);
        }
        else
        {
            runBrowse.setEnabled(false);
            runText.setEnabled(false);
        }
    }//GEN-LAST:event_runCheckActionPerformed

    private void iniCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_iniCheckActionPerformed
    {//GEN-HEADEREND:event_iniCheckActionPerformed
        if (iniCheck.isSelected())
        {
            iniBrowse.setEnabled(true);
            iniText.setEnabled(true);
        }
        else
        {
            iniBrowse.setEnabled(false);
            iniText.setEnabled(false);
        }
    }//GEN-LAST:event_iniCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        if (args.length == 1)
        {
            gamePath = args[0];
        }
        /* Set the Nimbus look and feel */
//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Window().setVisible(true);
            }
        });
    }

    public void load()
    {
        File saveFile = new File(".\\SETTINGS.CFG");
        try
        {

            BufferedReader fstream = new BufferedReader(new FileReader(saveFile));
            exeText.setText(fstream.readLine());
            gameText.setText(fstream.readLine());
            autoCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            fullCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            syncCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            blankCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            runCombo.setSelectedIndex(Integer.valueOf(fstream.readLine()));

            osRomCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            osRomText.setText(fstream.readLine());

            simCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            simText.setText(fstream.readLine());

            runCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            runText.setText(fstream.readLine());

            iniCheck.setSelected(Boolean.valueOf(fstream.readLine()));
            iniText.setText(fstream.readLine());

            mc1Check.setSelected(Boolean.valueOf(fstream.readLine()));
            mc1Text.setText(fstream.readLine());

            mc2Check.setSelected(Boolean.valueOf(fstream.readLine()));
            mc2Text.setText(fstream.readLine());

            fstream.close();
        }
        catch (Exception e)
        {
        }

        osRomCheckActionPerformed(null);
        simCheckActionPerformed(null);
        runCheckActionPerformed(null);
        iniCheckActionPerformed(null);
        mc1CheckActionPerformed(null);
        mc2CheckActionPerformed(null);
        autoCheckActionPerformed(null);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advPanel;
    private javax.swing.JCheckBox autoCheck;
    private javax.swing.JCheckBox blankCheck;
    private javax.swing.JButton exeBrowse;
    private javax.swing.JPanel exePanel;
    private javax.swing.JTextField exeText;
    private javax.swing.JCheckBox fullCheck;
    private javax.swing.JButton gameBrowse;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JTextField gameText;
    private javax.swing.JButton iniBrowse;
    private javax.swing.JCheckBox iniCheck;
    private javax.swing.JTextField iniText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton mc1Browse;
    private javax.swing.JCheckBox mc1Check;
    private javax.swing.JTextField mc1Text;
    private javax.swing.JButton mc2Browse;
    private javax.swing.JCheckBox mc2Check;
    private javax.swing.JTextField mc2Text;
    private javax.swing.JButton osRomBrowse;
    private javax.swing.JCheckBox osRomCheck;
    private javax.swing.JTextField osRomText;
    private javax.swing.JButton runBrowse;
    private javax.swing.JButton runButton;
    private javax.swing.JCheckBox runCheck;
    private javax.swing.JComboBox<String> runCombo;
    private javax.swing.JTextField runText;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton simBrowse;
    private javax.swing.JCheckBox simCheck;
    private javax.swing.JTextField simText;
    private javax.swing.JCheckBox syncCheck;
    // End of variables declaration//GEN-END:variables
}
